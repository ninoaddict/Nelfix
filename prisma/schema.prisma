// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id         String  @id @default(cuid())
  userId     String  @unique
  first_name String
  last_name  String
  imageUrl   String?
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([first_name, last_name])
}

model User {
  id             String           @id @default(cuid())
  username       String           @unique
  email          String           @unique
  password       String
  balance        Int              @default(100)
  role           Role             @default(USER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Profile        Profile?
  userBoughtFilm UserBoughtFilm[]
  wishList       WishList[]
  Review         FilmReview[]
}

model UserBoughtFilm {
  userId   String
  filmId   String
  boughtAt DateTime @default(now())
  price    Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  film     Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model WishList {
  userId String
  filmId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  film   Film   @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model FilmReview {
  userId    String
  filmId    String
  rating    Int
  content   String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model Film {
  id              String           @id @default(cuid())
  title           String           @db.VarChar(200)
  description     String?
  director        String?
  release_year    Int
  genre           String[]
  price           Float
  duration        Int
  video_url       String
  cover_image_url String
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  rating          Float              @default(0)
  userBoughtFilm  UserBoughtFilm[]
  wishList        WishList[]
  Review          FilmReview[]

  @@unique([title, director, release_year])
}
